Puolen tunnin pikakatsaus Rustiin â€“ TiivistelmÃ¤ suomeksi

Artikkeli "A Half-Hour to Learn Rust" tarjoaa nopean ja ytimekkÃ¤Ã¤n johdatuksen Rustin perusteisiin. TÃ¤ssÃ¤ tiivistelmÃ¤ keskeisistÃ¤ kohdista:


---

1. Perusasiat: muuttujat ja tulostus

Rustissa muuttujat ovat oletuksena muuttumattomia (immutable). Voit tehdÃ¤ niistÃ¤ muokattavia mut-avainsanalla:

let muuttuja = 10; // muuttumaton
let mut toinen = 20; // muokattava
toinen = 30; // OK, koska toinen on 'mut'

Tulostaminen onnistuu println!-makrolla:

println!("Hei, Rust! Arvo: {}", muuttuja);


---

2. Ohjausrakenteet: if, loop, match

Rust kÃ¤yttÃ¤Ã¤ tuttuja ehtolauseita ja silmukoita, mutta niissÃ¤ on muutamia eroja muihin kieliin verrattuna.

if muuttuja > 5 {
    println!("Suurempi kuin viisi!");
} else {
    println!("Pienempi tai yhtÃ¤ suuri.");
}

Silmukoista Rust tukee loop, while ja for:

for i in 0..5 {
    println!("Luku: {}", i);
}

match-lause on tehokas vaihtoehto switch-rakenteelle:

match muuttuja {
    1 => println!("Yksi!"),
    2 | 3 => println!("Kaksi tai kolme!"),
    _ => println!("Jokin muu"),
}


---

3. Funktiot ja tyypit

Funktiot mÃ¤Ã¤ritellÃ¤Ã¤n fn-avainsanalla ja niiden paluuarvot mÃ¤Ã¤ritetÃ¤Ã¤n nuolen (->) avulla:

fn lisÃ¤Ã¤_kaksi(n: i32) -> i32 {
    n + 2 // ei tarvita `return`
}

Rust kÃ¤yttÃ¤Ã¤ vahvaa tyyppijÃ¤rjestelmÃ¤Ã¤, mutta osaa myÃ¶s pÃ¤Ã¤tellÃ¤ tyypit:

let luku: i32 = 10; // eksplisiittisesti mÃ¤Ã¤ritelty tyyppi
let toinen = 20; // Rust pÃ¤Ã¤ttelee tyypin automaattisesti


---

4. Viitteet ja omistajuus

Rustin muistiturvallisuuden takana on omistajuusjÃ¤rjestelmÃ¤, joka varmistaa, ettei ohjelma kÃ¤ytÃ¤ virheellisiÃ¤ viitteitÃ¤.

SÃ¤Ã¤nnÃ¶t:

1. Jokaisella arvolla on vain yksi omistaja.


2. Kun omistaja poistuu, arvo vapautetaan automaattisesti.


3. Voit lainata (&) muuttujaa ilman omistajuuden siirtÃ¤mistÃ¤.



fn tulosta(viite: &String) {
    println!("{}", viite);
}

fn main() {
    let teksti = String::from("Hei!");
    tulosta(&teksti); // OK, koska annetaan vain viite
}

Jos yritÃ¤t kÃ¤yttÃ¤Ã¤ siirrettyÃ¤ omistajaa, Rust estÃ¤Ã¤ sen kÃ¤Ã¤nnÃ¶svaiheessa:

let s1 = String::from("Moi");
let s2 = s1; // s1:n omistus siirtyy s2:lle
println!("{}", s1); // VIRHE! s1 ei enÃ¤Ã¤ omista arvoa


---

5. Rinnakkaisuus ja asynkronisuus

Rust tekee rinnakkaisuudesta turvallista ilman perinteisiÃ¤ virheitÃ¤, kuten tietojen kilpailemista (data race).

Voit kÃ¤yttÃ¤Ã¤ thread::spawn-komentoa luomaan sÃ¤ikeitÃ¤:

use std::thread;
use std::time::Duration;

fn main() {
    thread::spawn(|| {
        println!("TÃ¤mÃ¤ ajetaan toisessa sÃ¤ikeessÃ¤!");
    });

    thread::sleep(Duration::from_millis(100));
}

Asynkroninen koodi toimii async ja await-avainsanoilla:

async fn suorita() {
    println!("Asynkroninen tehtÃ¤vÃ¤ kÃ¤ynnistyi!");
}


---

6. Rustin tÃ¤rkeimmÃ¤t ominaisuudet tiivistettynÃ¤

Muistin turvallisuus ilman roskienkeruuta

Tyyppiturvallisuus ja tarkat virheentarkistukset

Nopea suorituskyky, kuten C/C++

Erinomainen rinnakkaisuus ilman vaarallisia virheitÃ¤

HyvÃ¤ paketinhallinta ja tyÃ¶kalut (cargo)



---

Yhteenveto

Rust tarjoaa turvallisen, tehokkaan ja modernin ohjelmointikokemuksen. TÃ¤mÃ¤ artikkeli esitteli perusasiat noin puolessa tunnissa, mutta Rustissa on paljon syvyyttÃ¤, jota voi tutkia lisÃ¤Ã¤ virallisesta dokumentaatiosta tai oppimalla kÃ¤ytÃ¤nnÃ¶n kautta!


---

ğŸ“š Haluatko oppia lisÃ¤Ã¤?

Virallinen Rust-kirja: Rust Book

Rustin verkkosivut: Rust-lang.org

Interaktiivinen Rust-opas: Rustlings



---

SiinÃ¤ se! Nyt sinulla on peruskÃ¤sitys Rustista. ğŸš€ Jos haluat lisÃ¤Ã¤ yksityiskohtia, kannattaa tutustua alkuperÃ¤iseen artikkeliin:
ğŸ”— A Half-Hour to Learn Rust

Toivottavasti tÃ¤stÃ¤ oli hyÃ¶tyÃ¤! ğŸ˜Š

